<?xml version="1.0"?>
<!DOCTYPE article PUBLIC "-//OASIS//DTD DocBook XML V4.1.2//EN" "http://www.oasis-open.org/docbook/xml/4.1.2/docbookx.dtd" [
]>
<article id="storing-trust-existing">
	<title>Existing Trust Storage Implementations</title>

	<para>Obviously if a comprehensive, future-proof and realistic standard
		representation of out-of-band trust policy exists, we should not define a
		new representation for Linux. Instead we should gather around it. So let's
		examine	the various representations in use, and why they are insufficient
		to provide such a comprehensive standard.</para>

	<sect1 id="nss-trust-objects">
		<title>NSS Trust Objects</title>

		<para>Internally NSS represents out-of-band trust policy using PKCS#11
		trust objects. These are not well documented
			<footnote><para>Although one can see them in the NSS source code
				<ulink url="http://mxr.mozilla.org/seamonkey/source//security/nss/lib/ckfw/builtins/certdata.txt?raw=1">certdata.txt</ulink> file in all their glory.</para></footnote>
		so an attempt will be made to describe them here.</para>

		<para>Each NSS trust object contains the following attributes
			<footnote><para>In addition to standard PKCS#11 object attributes</para></footnote>
			used to find the the trust object that applies to a given X.509
			certificate:</para>

		<variablelist>
		<varlistentry>
			<term><literal>CKA_CLASS</literal></term>
			<listitem><para><literal>CKO_NSS_TRUST</literal></para></listitem>
		</varlistentry>
		<varlistentry>
			<term><literal>CKA_CERT_SHA1_HASH</literal></term>
			<listitem><para>A SHA1 hash of the DER encoded X.509
				certificate to which this trust object's policy
				applies.</para></listitem>
		</varlistentry>
		<varlistentry>
			<term><literal>CKA_CERT_MD5_HASH</literal></term>
			<listitem><para>An MD5 hash of the DER encoded X.509
				certificate to which this trust object's policy
				applies.</para></listitem>
		</varlistentry>
		<varlistentry>
			<term><literal>CKA_ISSUER</literal></term>
			<listitem><para>The DER encoding of the issuer of the
				X.509 certificate to which trust object's policy
				applies.</para></listitem>
		</varlistentry>
		<varlistentry>
			<term><literal>CKA_SUBJECT</literal></term>
			<listitem><para>The DER encoding of the subject of the
				X.509 certificate to which trust object's policy
				applies.</para></listitem>
		</varlistentry>
		<varlistentry>
			<term><literal>CKA_SERIAL_NUMBER</literal></term>
			<listitem><para>The DER encoding of the serial number of the
				X.509 certificate to which trust object's policy
				applies.</para></listitem>
		</varlistentry>
		</variablelist>

		<para>The NSS trust object then contains the following usage attributes.
			Together these roughly represent the KeyUsage and ExtendedKeyUsage
			certificate extensions, as out-of-band trust policy. The names should be
			self explanatory for readers familiar with those certifiacte
			extensions.</para>

		<itemizedlist>
		<listitem><para><literal>CKA_TRUST_DIGITAL_SIGNATURE</literal></para></listitem>
		<listitem><para><literal>CKA_TRUST_NON_REPUDIATION</literal></para></listitem>
		<listitem><para><literal>CKA_TRUST_KEY_ENCIPHERMENT</literal></para></listitem>
		<listitem><para><literal>CKA_TRUST_DATA_ENCIPHERMENT</literal></para></listitem>
		<listitem><para><literal>CKA_TRUST_KEY_AGREEMENT</literal></para></listitem>
		<listitem><para><literal>CKA_TRUST_KEY_CERT_SIGN</literal></para></listitem>
		<listitem><para><literal>CKA_TRUST_CRL_SIGN</literal></para></listitem>
		<listitem><para><literal>CKA_TRUST_SERVER_AUTH</literal></para></listitem>
		<listitem><para><literal>CKA_TRUST_CLIENT_AUTH</literal></para></listitem>
		<listitem><para><literal>CKA_TRUST_CODE_SIGNING</literal></para></listitem>
		<listitem><para><literal>CKA_TRUST_EMAIL_PROTECTION</literal></para></listitem>
		</itemizedlist>

		<para>The above usage attributes each can contain a trust setting, one of the
			following:</para>

		<variablelist>
		<varlistentry>
			<term><literal>CKT_NSS_TRUSTED</literal></term>
			<listitem><para>The certificate is trusted for this
				usage.</para></listitem>
		</varlistentry>
		<varlistentry>
			<term><literal>CKT_NSS_TRUSTED_DELEGATOR</literal></term>
			<listitem>
				<para>The certificate is trusted anchor as a certificate
				authority for the usages.</para>
				<para>In NSS the trusted anchor does not have to be
				self-signed. You can explicitly trust an intermediate
				certificate as if it were a trusted anchor.</para>
			</listitem>
		</varlistentry>
		<varlistentry>
			<term><literal>CKT_NSS_NOT_TRUSTED</literal></term>
			<listitem><para>This certificate is explicitly not trusted: neither
				for the given usage, nor as a delegator of the given
				usage.</para></listitem>
		</varlistentry>
		<varlistentry>
			<term><literal>CKT_NSS_MUST_VERIFY_TRUST</literal></term>
			<listitem>
				<para>The certificate is not a trusted anchor (even
				if a later trust record in another PKCS #11 module says
				this cert should be trusted). If the marked certificate is
				self-signed, then this is semantically equivalent to
				<literal>CKT_NSS_NOT_TRUSTED</literal>, except NSS will return
				a different error code (<emphasis>unknown CA</emphasis> for
				<literal>CKT_NSS_MUST_VERIFY_TRUST</literal>
				versus <emphasis>untrusted CA</emphasis> for
				<literal>CKT_NSS_NOT_TRUSTED</literal>).</para>
			</listitem>
		</varlistentry>
		<varlistentry>
			<term><literal>CKT_NSS_TRUST_UNKNOWN</literal></term>
			<listitem><para>This record does not explicitly provide trust one
				way or the other. If there is another trust record for this
				cert in another PKCS #11 module, use it.</para></listitem>
		</varlistentry>
		</variablelist>

		<sect2 id="nss-trust-problems">
			<title>Deficiencies</title>
			<para>NSS trust objects have been around for nearly two decades. They may
				have been sufficient in the past but are showing their age.</para>

			<para>These trust objects do not seem to be designed as a comprehensive
				representation of out-of-band trust policy. They are insufficient
				in the following ways:</para>

			<itemizedlist>
			<listitem><para>Makes use SHA1 and MD5 hashes both of which are
				aging cryptographically.</para></listitem>
			<listitem><para>Trust objects only support trust policy related to
				the KeyUsage, ExtendedKeyUsage and parts of the BasicConstraints
				certificate extensions.</para></listitem>
			<listitem><para>Even though the ExtendedKeyUsage certificate extension
				can support arbitrary usages, the set of usages represented by
				these trust objects is limited to those defined above. Trust
				policy for additional usages is awkward to add.</para></listitem>
			<listitem><para>Blacklisting is done by marking a certificate as untrusted
				for specific usages. This works in practice but does not correctly
				model the reality of having a certificate blacklisted completely
				and for any usage.</para></listitem>
			<listitem><para>Trust objects are a PKCS#11 specific. While PKCS#11 is one
				acceptable object model for representing out-of-band trust policy,
				for a standard representation it cannot be the only one.</para></listitem>
			</itemizedlist>
		</sect2>
	</sect1>

	<sect1 id="openssl-trusted">
		<title>OpenSSL Trusted Certificates</title>
		<para>OpenSSL contains a representation of out-of-band trust policy in its 
			<literal>TRUSTED CERTIFICATE</literal> PEM blocks aka. CertAux.
			Files containing this information can be manipulated using 
			its <command>openssl x509</command> tool.</para>

		<para>It appears that this format is undocumented, so an attempt will be made
			to document it here.</para>

		<para>PEM files contain a header and footer containing the words
			<literal>TRUSTED CERTIFICATE</literal>. Contained in the PEM
			data are two DER sequences. The first is an X.509 certificate,
			and the latter is a structure known internally as <literal>X509_CERT_AUX</literal>.</para>

		<para>The <literal>X509_CERT_AUX</literal> DER sequence may be defined as follows:
<programlisting>
CertAux ::= SEQUENCE {
      trust      SEQUENCE OF OBJECT IDENTIFIER OPTIONAL,
      reject     [0] SEQUENCE OF OBJECT IDENTIFIER OPTIONAL,
      alias      UTF8String OPTIONAL,
      keyid      OCTET STRING OPTIONAL,
      other      [1] SEQUENCE OF AlgorithmIdentifier OPTIONAL
}
</programlisting>
		</para>

		<para>The <literal>trust</literal> and <literal>reject</literal> fields
			contain sequences of ExtendedKeyUsage object identifiers to
			trust the certificate to be used for, or to reject usage of the
			certificate for.</para>

		<para>Together <literal>trust</literal> and <literal>reject</literal>
		fields represent out-of-band trust policy representing the
			ExtendedKeyUsage certificate extension. The other fields are
			not related to trust policy.</para>

		<sect2 id="openssl-trusted-problems">
			<title>Deficiencies</title>

			<para>This representation seems to be designed to solve a specific use
				case, and not designed as a comprehensive way to represent
				out-of-band trust policy.  It is insufficient in the following
				ways:</para>

			<itemizedlist>
			<listitem><para>This format only supports trust policy related to
				the ExtendedKeyUsage certificate extension.</para></listitem>
			<listitem><para>Blacklisting is done by rejecting a certificate for
				specific usages. This works in practice but does not correctly
				model the reality of having a certificate blacklisted completely
				and for any usage.</para></listitem>
			<listitem><para>This format has OpenSSL implementation specific traits.
				The PEM contents are the concatenation of two DER structures,
				and though trivially parseable with the OpenSSL DER parser, it
				is awkward to parse especially when using other and/or strict
				DER parsers.</para></listitem>
			</itemizedlist>
		</sect2>
	</sect1>


	<sect1 id="trust-assertions">
		<title>Trust Assertions</title>

		<para>Trust Assertions are the author's previous attempt to solve the problem of sharing
			trust policy information. Details about this are available online
				<footnote><para><ulink url="../pkcs11-trust-assertions/">Storing Trust Assertions in PKCS#11 Modules</ulink></para></footnote>.</para>

		<sect2 id="trust-assertion-problems">
			<title>Deficiencies</title>

			<para>Although claiming to solve the problem of out-of-band trust policy
				in a general way, closer inspection and application to the
				real world exposed the following problems:</para>

			<itemizedlist>
			<listitem><para>This concept only supports trust policy related to
				the ExtendedKeyUsage certificate extension.</para></listitem>
			<listitem><para>Blacklisting is done by rejecting a certificate for
				specific usages. This works in practice but does not correctly
				model the reality of having a certificate blacklisted completely
				and for any usage.</para></listitem>
			<listitem><para>Although they claim to be general trust assertions were
				thought out as a PKCS#11 specific concept. While PKCS#11 is one
				acceptable object model for representing out-of-band trust policy,
				for a standard representation it cannot be the only one.</para></listitem>
			</itemizedlist>

			<para>In addition claims of extensibility and generality proved hard
				to implement in the real world, and trust assertions ended up
				as a far more constrained concept that initially envisioned.</para>
		</sect2>
	</sect1>

	<sect1 id="ca-bundles">
		<title>Certificate Authority Bundles</title>

		<para>A bundle is either a file or directory containing one or more X.509
			certificate authorities. These have been used to represent the possible
			anchors on a system. These are widely used today.</para>

		<para>They are usually stored in the OpenSSL PEM format, but may also be
			seen in the Java Keystore format, and others.</para>

		<sect2 id="ca-bundle-problems">
			<title>Deficiencies</title>

			<para>Although widely used today certificate authority bundles have
				the following deficiencies as a standard representation of
				trust policy:</para>

			<itemizedlist>
			<listitem><para>There is no standard way to represent out-of-band
				trust policy in addition to the policy contained in the
				certificate extensions. In theory one could create different
				bundles for certificate authorities trusted for different
				usages and circumstances, but this quickly gets out of
				hand.</para></listitem>
			<listitem><para>There is no concept of blacklisting in a such a bundle
				bundle. One can remove a certificate from the bundle, but if
				that certificate is used in the middle of a certificate chain
				rather than as an anchor, the certificate validation will
				not respect such a removal.</para></listitem>
			</itemizedlist>
		</sect2>
	</sect1>

</article>
